<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on in-my-space</title>
    <link>https://hyuuri.github.io/categories/tech/</link>
    <description>Recent content in Tech on in-my-space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 13 Oct 2022 19:39:00 +0900</lastBuildDate><atom:link href="https://hyuuri.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-Part zipをどうやってlinuxで解凍するか？についての解答</title>
      <link>https://hyuuri.github.io/post/2022/10/13/multi-part-zip%E3%82%92%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6linux%E3%81%A7%E8%A7%A3%E5%87%8D%E3%81%99%E3%82%8B%E3%81%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E8%A7%A3%E7%AD%94/</link>
      <pubDate>Thu, 13 Oct 2022 19:39:00 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/10/13/multi-part-zip%E3%82%92%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6linux%E3%81%A7%E8%A7%A3%E5%87%8D%E3%81%99%E3%82%8B%E3%81%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E8%A7%A3%E7%AD%94/</guid>
      <description>Multi-Part zipをどうやって解凍するか？ 研究でドデカデータセットをダウンロードすることは多々あります。
で、唐突にこいつがやってきました。multi-part zipくん。
hoge.zip hoge.z01 hoge.z02 なんだこいつ。
こいつをいい感じに解凍する方法を調べたところwindowsでアプリ使おう！みたいなのが多くてムカついたのでLinuxコマンドでやる方法を調べたのでまとめます。
その解答 以下のコマンドでまずたくさんのzipファイルをまとめます。
cat hoge.z* &amp;gt; ./hogehoge.zip すると複数の謎z0Xなどのファイルが一つにまとまってドデカZipファイルになります。
であとはこれを解凍するだけです。
unzip hogehoge.zip 以上でした。
参考サイト https://unix.stackexchange.com/questions/40480/how-to-unzip-a-multipart-spanned-zip-on-linux</description>
    </item>
    
    <item>
      <title>ROS&#43;Singularity&#43;Azure Kinectで幸せになる（ならん）</title>
      <link>https://hyuuri.github.io/post/2022/09/21/ros-singularity-azure-kinect%E3%81%A7%E5%B9%B8%E3%81%9B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AA%E3%82%89%E3%82%93/</link>
      <pubDate>Wed, 21 Sep 2022 14:18:35 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/09/21/ros-singularity-azure-kinect%E3%81%A7%E5%B9%B8%E3%81%9B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AA%E3%82%89%E3%82%93/</guid>
      <description>モチベーション 澪田：「ROSでAzure Kinectを動かしたいッス！」
澪田：「でもPCの環境を汚したくないッス！」
みたいなときに使えるかもしれない。 前提として述べておくと、基本的にネイティブのUbuntuにそのままROSを載せて動かすほうがよっぽど楽である。
PC間通信も楽だし、USB周りも楽、何より基本的なトラブルシューティングがずっと調べやすい。
ちゃんとSLAMとかやりたいならSinguralityでROSを動かして、なんてはためんどくさいことせずに環境構築をやったほうが良い。
Singularityについての詳細な説明は省く。
要はDockerだけど/devとかをいい感じにしてくれる上にROOT権限がなくても色々できるわけだ。(fakeroot権限のみはrootユーザに登録してもらわないとダメだけど)
準備 - Azure Kinect - 強めのUbuntu PC（Ubuntuは18.04以上) - Singularityのインスコ やること 以下のDockerfileチックなdefファイルを使ってimageを作成する。
Bootstrap: docker From: nvidia/cuda:11.6.0-devel-ubuntu18.04 %environment export CUDA_PATH=/usr/local/cuda export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH source /opt/ros/melodic/setup.bash %post # mirrorを設定 perl -p -i.bak -e &amp;#39;s%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://ftp.riken.jp/Linux/ubuntu/%&amp;#39; /etc/apt/sources.list export DEBIAN_FRONTEND=noninteractive export TZ=Asia/Tokyo export CUDA_PATH=/usr/local/cuda export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH apt-get -y update apt-get -y dist-upgrade apt-get -y install wget git build-essential curl lsb-release gcc # Install ROS sh -c &amp;#39;echo &amp;#34;deb http://packages.</description>
    </item>
    
    <item>
      <title>StorageのSATA関連の設定でUbuntuが起動しなかった話</title>
      <link>https://hyuuri.github.io/post/2022/09/20/storage%E3%81%AEsata%E9%96%A2%E9%80%A3%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A7ubuntu%E3%81%8C%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Tue, 20 Sep 2022 12:54:45 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/09/20/storage%E3%81%AEsata%E9%96%A2%E9%80%A3%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A7ubuntu%E3%81%8C%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>何が起こったか 研究室のノートPCでやたら定期的にOSが起動しなくなるPCが見つかった。
実験で使うPCで非常に安定性がアレで困っていたので原因を調査することにした。
PCに起こっていた現象の詳細 どこまで起動するか、についていうとUEFIまでは起動する。
で，どのブートローダを選ぶ画面に突っ込んでしまい、肝心のUbuntu本体を選んでも以下のエラーが出てきて起動しないといった感じです.
Gave up waiting for root device. Common problems: - Boot args (cat /proc/cmdline) - Check rootdelay= (did the system wait long enough?) - Check root= (did the system wait for the right device?) - Missing modules (cat /proc/modules; ls /dev) ALERT! /dev/disk/by-uuid/XXXX does not exist. Dropping to a shell! どうやら起動時にrootデバイスのがちゃんと立ち上がるのを確認出来なかった？みたいです. これはなんでなんだろう&amp;hellip;?と思ったので調べました.
解決法 結論としてはSATAストレージのインターフェースの設定をAHCIという新しいモノに切り替えれば解決シマス.
やることは単純で，BIOSのSATAのインターフェーズのところをAHCIに変更するだけです. なんでこうなったの？ これはStack Overflowで見かけただけなんですが、一定期間起動しないとPC側で自動的にSATAのインターフェース設定がIDEという汎用性が高いものの古いものに変更されることが原因のようです．
AHCIとIDEについてはこのサイトを参考にするとわかりやすいです. つまり，AHCIは新しめの規格で新しいSATAの機能もりもりで新しいデバイスにも対応できるようです．（合ってる？）
AHCIでOSがインスコされているのに，IDEで起動しようとするとストレージの速度が出ずLinux側が待ちきれなくなってUbuntuをうまく起動出来なかったのではと思っています。
（運動会で張り切って全力疾走して体に気持ちがついてこなかった結果コケちゃうお父さん現象？）</description>
    </item>
    
    <item>
      <title>Pytorch Metric Learningでのバッチサイズの話</title>
      <link>https://hyuuri.github.io/post/2022/07/14/pytorch-metric-learning%E3%81%A7%E3%81%AE%E3%83%90%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E8%A9%B1/</link>
      <pubDate>Thu, 14 Jul 2022 13:51:12 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/07/14/pytorch-metric-learning%E3%81%A7%E3%81%AE%E3%83%90%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E8%A9%B1/</guid>
      <description>Pytorch Metric Learningとは？ 端的に言えば距離学習と呼ばれる機械学習タスクを扱うPytorchラッパーだ.
操作感はかなりPytorch Lightningと近く、距離学習が簡単に実行できる. こいつはかなり楽でいいんだけれど、イマイチ設定周りは試行錯誤がいる、というのが実際だ.
細かい説明は省くがそもそも距離学習は概念自体はわかりやすいが、様々な手法が存在するし、パラメータに大きく依存するところが大きく学習は結構大変だ. そこで色々試した結果わかったことのメモ書きと現状の謎を書いておこうと思う. 随時付け足していく. 基本的指針 batch size は基本的に大きい方が良い
これはTripletの選択の存在が大きいと考えている. つまり、多クラスの場合Tripletを作成する際にBatch Sizeが小さいとバリエーションが少ない可能性があるという話だ. 20クラスと仮定すると、全てのクラス同士の比較をするTripletの組み合わせは単純に考えて190個ある. それを考慮するとBatch Sizeは最低でも570は必要である. このことからすべてのtripletの組み合わせを一つのミニバッチに入れておきたいのであれば大きくした方が良いといえる. これは少し違う分野だがContractive Learningだと良く行われているようで概ね間違っていないのではないかと考えている. なお, Pytorch Metric LearningではBatch Sizeを大きくする際にエラーが出ることがある. ここにあるように、バッチサイズを小さくする以外に対処方がないようである.(2022/07/14現在) 現状自分のデータセットであるとBatch Size=1024までは動作できていることを確認した. なお、ミニバッチのサイズが大きくなると学習は進みにくなるので、epochは大きくすることを勧める.</description>
    </item>
    
    <item>
      <title>Squared Earth Mover&#39;s Distanceを二次元平面に適用するやつをPytorchで実装した</title>
      <link>https://hyuuri.github.io/post/2022/05/28/squared-earth-movers-distance%E3%82%92%E4%BA%8C%E6%AC%A1%E5%85%83%E5%B9%B3%E9%9D%A2%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4%E3%82%92pytorch%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F/</link>
      <pubDate>Sat, 28 May 2022 15:50:46 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/05/28/squared-earth-movers-distance%E3%82%92%E4%BA%8C%E6%AC%A1%E5%85%83%E5%B9%B3%E9%9D%A2%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%82%84%E3%81%A4%E3%82%92pytorch%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F/</guid>
      <description>EMDについて Earth Mover&amp;rsquo;s Distance(EMD)は分布間の距離を表す指標の一つです。
KL距離などと似ていますが、EMDは重み、という概念を用いる部分が肝ですね。重みと距離を表すものですので、MLの分野におけるLossとして用いることができそうですね。
例えば、GANでは積極的に用いられており、W-GANでは連続値版のEMDである、Wassernstein Lossという名前で用いられています。
その平面画像への適用を行うSquared EMDなるものが存在しているらしいので、それを参考文献を参照して二次元行列に対して適用可能なものを作ってみました。
なぜ今回これを作ったか 研究で尤度マップをモデルに生成させており、その学習に用いてみようと思い立ったためです。
単純に考えれば、正解ラベルの尤度マップとのMSELoss(二乗誤差損失)でも問題ないようにも思いますが、肝心の尤度の分布のズレ等は反映されない問題があります。
実装 結構単純です
def SquaredEMDLoss(self,y_pred, y_true): integral_y_true = torch.cumsum(torch.cumsum(y_true, dim=3), dim=2) integral_y_pred = torch.cumsum(torch.cumsum(y_pred, dim=3), dim=2) square = torch.square(integral_y_true - integral_y_pred) square_sum = torch.sum(torch.sum(square, dim=3), dim=2) mean = torch.div(square_sum, len(y_pred[0][0])**2) distance = torch.mean(mean) return distance 二次元行列の積分画像的なものを作成し、その差分を取り、二乗和を取ります。あとはそのBatchの平均を取ってLossとします。 (間違いがあれば教えて下さい。)
現状 計算量はGPU上で行ってもそこそこ重めです。速度の計測はしていませんがそこそこ遅いので我慢してください。 ただし、結構分布としては近づくように学習は進んでいるので意図通りのものはできたのかなと思います。
*追記 学習そのものは進みますが、最適化問題を無理やり微分可能なものに落とし込んでいるために、学習結果自体は芳しいものにはなりませんでした。
尤度マップがギザギザになってしまったり、曖昧な表現が難しくなってしまいました。うまく活かせるタスクとそうでないタスクを選びそうです。
素直に実績のあるWassersteinLossを参考にしたほうが良い気がしました。
指摘をしてくれた同期のhppには感謝を捧げます。
参考文献 https://discuss.pytorch.org/t/implementation-of-squared-earth-movers-distance-loss-function-for-ordinal-scale/107927</description>
    </item>
    
    <item>
      <title>Hugoでサイトを作るなどした</title>
      <link>https://hyuuri.github.io/post/2022/04/21/hugo%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AA%E3%81%A9%E3%81%97%E3%81%9F/</link>
      <pubDate>Thu, 21 Apr 2022 22:15:57 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/04/21/hugo%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AA%E3%81%A9%E3%81%97%E3%81%9F/</guid>
      <description>Hugoでサイトを作るなどした 研究室の先生に自分でサイトくらい持っておかないといけないよ、的なことを言われたのでもそもそと作ってみました。 Webに強い友人に聴いたところGatsubyは最近はそこまで流行っておらず、HugoがGoで作られておりなかなかに良いとおすすめされたのでこれにしました。 実際HTMLとかCSSとかをがりがり書かなくても、なかなかに良いテンプレートが合って適当にMDで書けばいい感じにしてくれるので満足してます。
作るまでにあった色々のトラブルシューティングなど 画像が表示されない 原因、変な名前で画像を保存してた。（_.pngだった&amp;hellip;)
themesが適用されない いまいち原因不明 おそらくhugoでビルドしていたことが原因</description>
    </item>
    
  </channel>
</rss>
