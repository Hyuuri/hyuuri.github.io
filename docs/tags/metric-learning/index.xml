<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metric Learning on in-my-space</title>
    <link>https://hyuuri.github.io/tags/metric-learning/</link>
    <description>Recent content in Metric Learning on in-my-space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 14 Jul 2022 13:51:12 +0900</lastBuildDate><atom:link href="https://hyuuri.github.io/tags/metric-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pytorch Metric Learningでのバッチサイズの話</title>
      <link>https://hyuuri.github.io/post/2022/07/14/pytorch-metric-learning%E3%81%A7%E3%81%AE%E3%83%90%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E8%A9%B1/</link>
      <pubDate>Thu, 14 Jul 2022 13:51:12 +0900</pubDate>
      
      <guid>https://hyuuri.github.io/post/2022/07/14/pytorch-metric-learning%E3%81%A7%E3%81%AE%E3%83%90%E3%83%83%E3%83%81%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E8%A9%B1/</guid>
      <description>Pytorch Metric Learningとは？ 端的に言えば距離学習と呼ばれる機械学習タスクを扱うPytorchラッパーだ.
操作感はかなりPytorch Lightningと近く、距離学習が簡単に実行できる. こいつはかなり楽でいいんだけれど、イマイチ設定周りは試行錯誤がいる、というのが実際だ.
細かい説明は省くがそもそも距離学習は概念自体はわかりやすいが、様々な手法が存在するし、パラメータに大きく依存するところが大きく学習は結構大変、というのが正直なところだ. そこで色々試した結果わかったことのメモ書きと現状の謎を書いておこうと思う. 随時付け足していく. 基本的指針 batch size は基本的に大きい方が良い これはTripletの選択の存在が大きいと考えている. つまり、多クラスの場合Tripletを作成する際にBatch Sizeが小さいとバリエーションが少ない可能性があるという話だ. 20クラスと仮定すると、全てのクラス同士の比較をするTripletの組み合わせは単純に考えて190個ある. それを考慮するとBatch Sizeは最低でも570は必要である. このことからすべてのtripletの組み合わせを一つのミニバッチに入れておきたいのであれば大きくした方が良いといえる. これは少し違う分野だがContractive Learningだと良く行われているようで概ね間違っていないのではないかと考えている. なお, Pytorch Metric LearningではBatch Sizeを大きくする際にエラーが出ることがある. https://github.com/KevinMusgrave/pytorch-metric-learning/issues/367 ここにあるように、バッチサイズを小さくする以外に対処方がないようである.(2022/07/14現在) 現状自分のデータセットであるとBatch Size=1024までは動作できていることを確認した. なお、ミニバッチのサイズが大きくなると学習は進みにくなるので、epochは大きくすることを勧める.</description>
    </item>
    
  </channel>
</rss>
